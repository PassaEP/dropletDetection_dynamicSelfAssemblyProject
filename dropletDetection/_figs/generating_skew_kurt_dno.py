#!/usr/bin/env python

__author__ = "Melissa Klocke"
__email__ = "klocke@ucr.edu"
__version__ = "1.0"

import sys
import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def main():
	'''This code reads in the "intensity.csv" file generated by the nd2_droplet_cy3 python code. The data
	in the "intensity.csv" is in histogram format, with 256 bins for pixel values in the ROIs (droplets) of the
	image. To create a more realistic dataset, we first generate random intensities within each bin for 
	each count. Then we get the skew and kurtosis based on the generated values for each droplet detected
	in the nd2_droplet_cy3 code. All data is saved in ".csv" format.'''

	if len(sys.argv)==1:
		print("Need to specify file to process as a parameter.")
		print("   Exiting")
		exit()

	fn = sys.argv[1] 
	df = pd.read_csv(fn, index_col=0)

	fext, fname_trunc = get_names(fn)
	df_info = import_info_df(fname_trunc)
	df, bw_df = get_bin_width(df)
	df, mbw_b = get_mean_bin_width(df)
	rand_int_df = calc_rand_intensities(df, fname_trunc)
	skews, df_info = get_skew(rand_int_df, fname_trunc, df_info)
	kurt, df_info = get_kurtosis(rand_int_df, fname_trunc, df_info)

	df_info.to_csv('%s_final_data.%s' % (fname_trunc, 'csv'))
	# plot_values(skews, kurt, fname)
	print('Done')

def get_names(fn):
	basdir, basename = os.path.split(fn)
	fname, fext = os.path.splitext(basename)

	split_char = '_'
	fname_trunc = fname.split(split_char)
	fname_trunc = split_char.join(fname_trunc[:-2]) # changed to [-2] now that intensity and vals are filtered
	return fext, fname_trunc

def import_info_df(fname_trunc):
	val_fn = str(fname_trunc + '_val_filtered.csv') # changed to 'val_filtered' now that intensity and vals are filtered
	df_info = pd.read_csv(val_fn, index_col=0)
	return df_info

def get_bin_width(df):
	'''Get bin width for each droplet.'''
	df_drop_no = df.groupby('droplet number', sort=False)
	diff_int = df.groupby('droplet number')['bin start'].diff()
	df = df.merge(diff_int, left_index=True, right_index=True)
	df = df.rename(columns={'bin start_x':'bin start','bin start_y':'Bin Width'}) 
	return df, diff_int

def get_mean_bin_width(df):
	'''Generate mean bin width for each droplet.'''
	# instead of adding the repeated values to a column, I could probably 
	# use groupby to do arithmatic using multiple dataframes? 
	mean_df = df.groupby('droplet number')['Bin Width'].mean().reset_index()
	mean_df = mean_df.rename(columns={'Bin Width':'Mean Bin Width'})
	mean_df = mean_df.round(3)
	df = df.merge(mean_df[['droplet number', 'Mean Bin Width']], on='droplet number')
	return df, mean_df

def calc_rand_intensities(df, fname):
	'''Calculate random intensity values for each count within each bin.'''
	rand_int_df = []

	n = 0
	for row in df.index:
		count = df['count'].iloc[n]
		binwidth = df['Mean Bin Width'].iloc[n]
		intensity = df['bin start'].iloc[n]
		drop_no = df['droplet number'].iloc[n]
		for i in range(count):
			r_intensity = intensity - 0.5 * binwidth + binwidth*np.random.random(1)
			r_intensity = r_intensity.round(3)
			rand_int_df.append([r_intensity[0], drop_no])
		n += 1
	rand_int_df = pd.DataFrame(rand_int_df, columns=['count', 'droplet number'])
	rand_int_df.to_csv(fname + '_generated_intensities.csv')
	return rand_int_df

def get_skew(rand_int_df, fname, df_info):
	'''Calculate the skew for each droplet based on the generated intensity values. -- which skew'''
	skews = rand_int_df.groupby(['droplet number'], sort=False)['count'].apply(pd.DataFrame.skew)
	skews = pd.DataFrame(skews)
	skews = skews.round(decimals=5)
	skews.reset_index(level=0, inplace=True)
	skews['Measurement'] = 'Skew'
	skews = skews.rename(columns={'count': 'value'})

	df_info = df_info.merge(skews[['droplet number', 'value']], on='droplet number')
	df_info = df_info.rename(columns={'value': 'skew'})
	return skews, df_info

def get_kurtosis(rand_int_df, fname, df_info):
	'''Generate the kurtosis for each droplet based on the generated intensity values. -- which kurt'''
	kurt = rand_int_df.groupby(['droplet number'], sort=False)['count'].apply(pd.DataFrame.kurt)
	kurt = pd.DataFrame(kurt)
	kurt = kurt.round(decimals=5)
	kurt.reset_index(level=0, inplace=True)
	kurt['Measurement'] = 'Kurtosis'
	kurt = kurt.rename(columns={'count': 'value'})

	df_info = df_info.merge(kurt[['droplet number', 'value']], on='droplet number')
	df_info = df_info.rename(columns={'value': 'kurtosis'})
	return kurt, df_info

def plot_values(skews, kurt, fname):
	with sns.plotting_context('notebook', font_scale=1.25):
		ax = sns.lmplot(x='droplet number', y='count', data=skews, 
		fit_reg=False, hue='droplet number', palette='magma')
		#     ax.set(xlabel='count', ylabel='count', title='Intensity in droplets over time')
		ax.set(ylabel='Skewness', ylim = (-1,1), title='Skew of intensity for each droplet')
		ax.savefig(fname + '_skewplot.png')

	with sns.plotting_context('notebook', font_scale=1.5):
		ax = sns.lmplot(x='droplet number', y='count', data=kurt, 
		fit_reg=False, hue='droplet number', palette='magma')
		#     ax.set(xlabel='count', ylabel='count', title='Intensity in droplets over droplet number')
		ax.set(ylabel='Kurtosis', title='Kurtosis of intensity for each droplet')
		ax.savefig(fname + '_kurtplot.png')

if __name__ == '__main__':
    main()